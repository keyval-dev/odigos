/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/odigos-io/odigos/api/actions/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedactionLister helps list Redactions.
// All objects returned here must be treated as read-only.
type RedactionLister interface {
	// List lists all Redactions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Redaction, err error)
	// Redactions returns an object that can list and get Redactions.
	Redactions(namespace string) RedactionNamespaceLister
	RedactionListerExpansion
}

// redactionLister implements the RedactionLister interface.
type redactionLister struct {
	indexer cache.Indexer
}

// NewRedactionLister returns a new RedactionLister.
func NewRedactionLister(indexer cache.Indexer) RedactionLister {
	return &redactionLister{indexer: indexer}
}

// List lists all Redactions in the indexer.
func (s *redactionLister) List(selector labels.Selector) (ret []*v1alpha1.Redaction, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Redaction))
	})
	return ret, err
}

// Redactions returns an object that can list and get Redactions.
func (s *redactionLister) Redactions(namespace string) RedactionNamespaceLister {
	return redactionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedactionNamespaceLister helps list and get Redactions.
// All objects returned here must be treated as read-only.
type RedactionNamespaceLister interface {
	// List lists all Redactions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Redaction, err error)
	// Get retrieves the Redaction from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Redaction, error)
	RedactionNamespaceListerExpansion
}

// redactionNamespaceLister implements the RedactionNamespaceLister
// interface.
type redactionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Redactions in the indexer for a given namespace.
func (s redactionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Redaction, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Redaction))
	})
	return ret, err
}

// Get retrieves the Redaction from the indexer for a given namespace and name.
func (s redactionNamespaceLister) Get(name string) (*v1alpha1.Redaction, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redaction"), name)
	}
	return obj.(*v1alpha1.Redaction), nil
}
