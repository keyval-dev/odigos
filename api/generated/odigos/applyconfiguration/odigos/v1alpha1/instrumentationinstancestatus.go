/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// InstrumentationInstanceStatusApplyConfiguration represents an declarative configuration of the InstrumentationInstanceStatus type for use
// with apply.
type InstrumentationInstanceStatusApplyConfiguration struct {
	NonIdentifyingAttributes []AttributeApplyConfiguration                    `json:"nonIdentifyingAttributes,omitempty"`
	Healthy                  *bool                                            `json:"healthy,omitempty"`
	Message                  *string                                          `json:"message,omitempty"`
	Reason                   *string                                          `json:"reason,omitempty"`
	StartTime                *v1.Time                                         `json:"startTime,omitempty"`
	LastStatusTime           *v1.Time                                         `json:"lastStatusTime,omitempty"`
	Components               []InstrumentationLibraryStatusApplyConfiguration `json:"components,omitempty"`
}

// InstrumentationInstanceStatusApplyConfiguration constructs an declarative configuration of the InstrumentationInstanceStatus type for use with
// apply.
func InstrumentationInstanceStatus() *InstrumentationInstanceStatusApplyConfiguration {
	return &InstrumentationInstanceStatusApplyConfiguration{}
}

// WithNonIdentifyingAttributes adds the given value to the NonIdentifyingAttributes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NonIdentifyingAttributes field.
func (b *InstrumentationInstanceStatusApplyConfiguration) WithNonIdentifyingAttributes(values ...*AttributeApplyConfiguration) *InstrumentationInstanceStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNonIdentifyingAttributes")
		}
		b.NonIdentifyingAttributes = append(b.NonIdentifyingAttributes, *values[i])
	}
	return b
}

// WithHealthy sets the Healthy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Healthy field is set to the value of the last call.
func (b *InstrumentationInstanceStatusApplyConfiguration) WithHealthy(value bool) *InstrumentationInstanceStatusApplyConfiguration {
	b.Healthy = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *InstrumentationInstanceStatusApplyConfiguration) WithMessage(value string) *InstrumentationInstanceStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithReason sets the Reason field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reason field is set to the value of the last call.
func (b *InstrumentationInstanceStatusApplyConfiguration) WithReason(value string) *InstrumentationInstanceStatusApplyConfiguration {
	b.Reason = &value
	return b
}

// WithStartTime sets the StartTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartTime field is set to the value of the last call.
func (b *InstrumentationInstanceStatusApplyConfiguration) WithStartTime(value v1.Time) *InstrumentationInstanceStatusApplyConfiguration {
	b.StartTime = &value
	return b
}

// WithLastStatusTime sets the LastStatusTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastStatusTime field is set to the value of the last call.
func (b *InstrumentationInstanceStatusApplyConfiguration) WithLastStatusTime(value v1.Time) *InstrumentationInstanceStatusApplyConfiguration {
	b.LastStatusTime = &value
	return b
}

// WithComponents adds the given value to the Components field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Components field.
func (b *InstrumentationInstanceStatusApplyConfiguration) WithComponents(values ...*InstrumentationLibraryStatusApplyConfiguration) *InstrumentationInstanceStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithComponents")
		}
		b.Components = append(b.Components, *values[i])
	}
	return b
}
